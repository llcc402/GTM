%% Input:
%      data        a matrix with each column is corresponding to an
%                  observation.
%      phi         should be generated by monifold_generate.
%      grid        should be generated by grid_generate.
%      maxIter     a scalar. The iterative number of the EM.
%% Output:
%      label       a vector of length m, where m is the number of
%                  observations, i.e., the number of columns of data.
%
function [W, beta] = gtm(data, phi, grid, maxIter)
%% Init 

% m is the number of observations and n is the dimension
[n, m] = size(data);

% the number of grid
k = size(grid, 2);

% center the data
data = data - repmat(mean(data, 2), 1, m);

% whitten the data
data = data ./ repmat(std(data, 1, 2), 1, m);

% init transform matrix W
[u,~,~] = svd(data);
u = u(:, 1:2);  
A = phi * phi';
B = u * (grid * phi');
W = B / A;
% W = randn(size(data,1), size(phi,1));


% init beta
dist = pdist2((W * phi)', data');
beta = sum(sum(dist.^2)) / m / n;
beta = 1 / beta;
likelihood_vec = zeros(1, maxIter);

%% EM
for iter = 1:maxIter
    %% E step
    
    tic
    % the value of r_vec are(i,l) the probs: p(x_i|t_l, W_{old}, beta_{old})
    % the columns of r_mat should sum to 1
    r_mat = pdist2((W * phi)', data');
    r_mat = - (r_mat .^2)  * beta  / 2;
    
    r_mat = r_mat - repmat(max(r_mat), k, 1);
    r_mat = exp(r_mat);
    
    % normalize columns of r_mat
    r_mat = r_mat ./ (repmat(sum(r_mat), k, 1));
    
    %% M step
    
    % update W
    A = sum(r_mat, 2);
    B = phi * diag(A) * phi';
    C = data * r_mat' * phi';
    W = C / B;
    
    % update beta
    dist = pdist2((W * phi)', data');
    dist = (dist .^ 2) .* r_mat;
    beta = sum(sum(dist)) / m / n;
    beta = 1 / beta;
    
    %% post process
    
    % compute loglikelihood
    dist = exp(-dist * beta / 2) * (beta / 2 / pi)^n;
    loglikelihood = sum(log(sum(dist) / k));
    likelihood_vec(iter) = loglikelihood;
    
    fprintf(['iter ', num2str(iter), ' done\n'])
    if iter > 1
        fprintf(['epsilon = ', num2str(likelihood_vec(iter) - likelihood_vec(iter - 1)), '\n'])
    end
    toc
end
plot(likelihood_vec)


end

